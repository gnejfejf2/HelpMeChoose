AppName = "HelpMeChooseIOS"
Schema = "HelpMeChooseIOS"
BundleId = "io.tuist.HelpMeChoose"

ApiKeyPath = "fastlane/29H93BJQ55.json"
KeyChainName = "291KeyChain"
KeyChainPassword = "dlrndurdmldlfemddmsdnfl"
CertificatePath = "Certification/FastalneKey.p12"
CertificatePath2 = "Certification/DevelopKey.p12"
CertificatePassword = "dlrndurdmldlfemddmsdnfl"
ProvisioningProfiles = "Fastalne"
InstallProvisioningProfile = "Certification/Develop.mobileprovision"
FastlaneProvisioningProfile = "Certification/Fastlane.mobileprovision"


DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

desc "build app and upload to testflight"
	lane :NewVersionUpload do
	#fastlaneSetting
	#fastalne match

	#get_certificates
    	#get_provisioning_profile


    	sync_code_signing(
      		type: "appstore",
      		app_identifier: BundleId,
      		readonly: true
    	)


    	latest_build_number=latest_testflight_build_number(
		api_key_path: ApiKeyPath
	)
	
	buildApp "Debug"

#	testFlightUpload
   	
end


desc "Get certificates"
  lane :certificates do


	

    sync_code_signing(
      	type: "development",
      	app_identifier: BundleId,
	api_key_path: ApiKeyPath,
	force_for_new_devices: true,
      	readonly: false
    )

    # You can repeate the sync_code_signing with other types of certificates such as appstore and adhoc
    sync_code_signing(
      type: "appstore",
      app_identifier: BundleId,
      readonly: false
    )
end


desc "build app and upload to testflight"
	lane :DevServerUpload do
	fastlaneSetting

    	latest_build_number=latest_testflight_build_number(
		api_key_path: ApiKeyPath
	)
	devBuild latest_build_number
   	upload_to_testflight(
		api_key_path: ApiKeyPath
	)
end



desc "build app and upload to testflight"
	lane :ProdServerUpload do
	fastlaneSetting

    	latest_build_number=latest_testflight_build_number(
		api_key_path: ApiKeyPath
	)

	prodBuild latest_build_number
   	
	upload_to_testflight(
		api_key_path: ApiKeyPath
	)
end



def createKeyChain
     	create_keychain(
		name: KeyChainName ,
		password: KeyChainPassword,
		timeout: 1800,
		default_keychain: true,
		unlock: true
	)
	


end


def importCertificate
	import_certificate(
  		certificate_path: CertificatePath,
  		certificate_password: CertificatePassword,
  		keychain_name: KeyChainName ,
  		keychain_password: KeyChainPassword
	)
	import_certificate(
  		certificate_path: CertificatePath2,
  		certificate_password: CertificatePassword,
  		keychain_name: KeyChainName ,
  		keychain_password: KeyChainPassword
	)  


end


def incrementBuildNumber
	increment_build_number(
            	xcodeproj: AppName + ".xcodeproj"
        	)
end





def fastlaneSetting
#	createKeyChain   
#	importCertificate
#	install_provisioning_profile(path: InstallProvisioningProfile)
#	install_provisioning_profile(path: FastlaneProvisioningProfile)

	sync_code_signing(
      		type: "appstore",
      		app_identifier: 'io.tuist.HelpMeChoose',
      		readonly: false
    	)  

end

def buildApp(configuration)



	build_app(
		workspace: AppName + ".xcworkspace" , configuration: configuration
    	)
end


def testFlightUpload



	upload_to_testflight(
		api_key_path: ApiKeyPath ,
		
	)

end
 


