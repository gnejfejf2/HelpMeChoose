AppName = "HelpMeChooseIOS"
Scheme = "HelpMeChooseIOS"
BundleId = "io.tuist.HelpMeChoose"

ApiKeyPath = "fastlane/29H93BJQ55.json"

desc "build app and upload to testflight"
	lane :NewVersionUpload do

	
	 app_store_connect_api_key(
    		key_id: "29H93BJQ55",
    		issuer_id: "627d91c8-cce6-4b96-b60a-d7022048374f",
    		key_content: "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQg9O4zrN202k1PMdcl\nOKnw8hQDsV55UbOpf6ArUWr+deSgCgYIKoZIzj0DAQehRANCAAS9AkrqDCywxzeH\n1/FCNXV/fm6aTwLHSC3wgzuS54+ykdjZBTBr14hveIQU+rlXXlPwn0gk418lyOwP\n2nB4h/QM\n-----END PRIVATE KEY-----"
    	)


	
    	sync_code_signing(
      		type: "appstore",
		username: "JiYoun Kang",
      		app_identifier: BundleId,
      		readonly: true
    	)

	
	match(type: "appstore")
	match(type: "appstore")
    	latest_build_number=latest_testflight_build_number(
		api_key_path: ApiKeyPath
	)
	
	buildApp "Debug"

#	pilot( api_key_path: ApiKeyPath )
#	testFlightUpload
   	
end


desc "Get certificates"
  lane :certificates do


	

    sync_code_signing(
      	type: "development",
      	app_identifier: BundleId,
	api_key_path: ApiKeyPath,
	force_for_new_devices: true,
      	readonly: false
    )

    # You can repeate the sync_code_signing with other types of certificates such as appstore and adhoc
    sync_code_signing(
	type: "appstore",
	app_identifier: BundleId,
	api_key_path: ApiKeyPath,
	readonly: false
    )
end


desc "build app and upload to testflight"
	lane :DevServerUpload do
	fastlaneSetting

    	latest_build_number=latest_testflight_build_number(
		api_key_path: ApiKeyPath
	)
	devBuild latest_build_number
   	upload_to_testflight(
		api_key_path: ApiKeyPath
	)
end



desc "build app and upload to testflight"
	lane :ProdServerUpload do
	fastlaneSetting

    	latest_build_number=latest_testflight_build_number(
		api_key_path: ApiKeyPath
	)

	prodBuild latest_build_number
   	
	upload_to_testflight(
		api_key_path: ApiKeyPath
	)
end



def createKeyChain
     	create_keychain(
		name: KeyChainName ,
		password: KeyChainPassword,
		timeout: 1800,
		default_keychain: true,
		unlock: true
	)
	


end


def importCertificate
	import_certificate(
  		certificate_path: CertificatePath,
  		certificate_password: CertificatePassword,
  		keychain_name: KeyChainName ,
  		keychain_password: KeyChainPassword,
		readonly: true
	)
	import_certificate(
  		certificate_path: CertificatePath2,
  		certificate_password: CertificatePassword,
  		keychain_name: KeyChainName ,
  		keychain_password: KeyChainPassword,
		readonly: true
	)  


end


def incrementBuildNumber
	increment_build_number(
            	xcodeproj: AppName + ".xcodeproj"
        	)
end





def fastlaneSetting
#	createKeyChain   
#	importCertificate
#	install_provisioning_profile(path: InstallProvisioningProfile)
#	install_provisioning_profile(path: FastlaneProvisioningProfile)

	sync_code_signing(
      		type: "appstore",
      		app_identifier: 'io.tuist.HelpMeChoose',
      		readonly: false
    	)  

end

def buildApp(configuration)
	

	update_project_team(
  		path: AppName + ".xcodeproj",
		teamid: "V4XA5J4GH9"
	)

	

	
	build_app(
		workspace: AppName + ".xcworkspace"  , scheme: Scheme  , configuration: configuration,
		export_options: {
     	 		method: "app-store",
      			signingStyle: "manual"
    		}
    	)
end





